const express = require('express');
const app = express();
const favicon = require('serve-favicon');
const path = require('path');
const bodyParser = require('body-parser');
const bcrypt = require('bcrypt');
const mysql = require('mysql2/promise');
require('dotenv').config();

const port = 3000;

const connection = mysql.createPool({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_DATABASE
});

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.use(express.static(path.join(__dirname, 'public')));
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));
app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));

app.use('/html', express.static('public/html'));
app.use('/icon', express.static('icon'));
app.use('/js', express.static('js'));
app.use('/ejs', express.static('views'));
app.use('/ejs/css', express.static('views/css'));

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, '/public/html', 'index.html'));
});

app.get('/login', (req, res) => {
  res.sendFile(path.join(__dirname, '/public/html', 'login .html'));
});
app.post('/login', async (req, res) => {
  const { username, password } = req.body;

  try {
      const [rows] = await connection.query('SELECT * FROM users WHERE username = ?', [username]);

      if (rows.length === 0) {
          return res.status(401).send('Invalid username or password');
      }

      const user = rows[0];
      const passwordMatch = await bcrypt.compare(password, user.password);

      if (passwordMatch) {
          res.send('Login successful!');
      } else {
          res.status(401).send('Invalid username or password');
      }
  } catch (error) {
      console.error(error);
      res.status(500).send('Internal Server Error');
  }
});

app.get('/signup', (req, res) => {
    res.sendFile(path.join(__dirname, '/public/html', 'signup.html'));
});

app.post('/signup', async (req, res) => {
    const { username, password } = req.body;

    try {
        const [rows] = await connection.query('SELECT * FROM users WHERE username = ?', [username]);

        if (rows.length > 0) {
            return res.status(400).send('Username is already taken');
        }

        const hashedPassword = await bcrypt.hash(password, 10);

        await connection.query('INSERT INTO users (username, password) VALUES (?, ?)', [username, hashedPassword]);

        res.redirect('/login');
    } catch (error) {
        console.error(error);
        res.status(500).send('Internal Server Error');
    }
});

app.listen(port, () => {
    console.log(`Server is running at http://localhost:${port}`);
});
